{"version":3,"sources":["components/Header.js","components/Form.js","helper.js","components/Summary.js","components/Result.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["HeaderContainer","styled","header","H1Holder","h1","Header","title","Button","button","Error","div","Form","saveSummary","saveSpinner","useState","brand","year","plan","info","saveInfo","error","updateError","updateInfo","e","target","name","value","onSubmit","preventDefault","defaultInsurance","insurance","Date","getFullYear","getInsuranceByYear","parseInt","toFixed","getInsuranceByBrand","getInsuranceByPlan","setTimeout","quote","className","onChange","type","checked","SummaryContainer","Summary","summary","Messagge","p","QuoteText","QuoteContainer","Result","TransitionGroup","component","CSSTransition","classNames","timeout","enter","exit","Spinner","FormContainer","App","spinner","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63ab1699.chunk.js","sourcesContent":["import styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nconst HeaderContainer = styled.header`\n    background-color: #26C6DA;\n    padding: 10px;\n    font-weight: bold;\n    color: #FFF;\n`;\n\nconst H1Holder = styled.h1`\n    font-size: 2rem;\n    margin: 0;\n    font-family: 'Slabo 27px', serif;\n    text-align: center\n`;\n\nconst Header = ( {title} ) => {\n    return(\n        <HeaderContainer>\n            <H1Holder>{title}</H1Holder>\n        </HeaderContainer>\n    );\n};\n\nHeader.propTypes = {\n    title: PropTypes.string.isRequired\n};\n \nexport default Header;","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { getInsuranceByYear, getInsuranceByBrand, getInsuranceByPlan } from '../helper';\nimport PropTypes from 'prop-types';\n\n\nconst Button = styled.button`\n    background-color: #00838F;\n    color: #fff;\n    text-transform: uppercase;\n    font: bold;\n    border: none;\n    transition: background-color .3s ease;\n\n    &:hover {\n        background-color: #26C6DA;\n        color: #fff;\n    }\n`;\n\nconst Error = styled.div`\n    background-color: red;\n    color: white;\n    padding: 1rem;\n    width: 100%;\n    text-align: center;\n    margin-bottom: 2rem;\n`;\n\nconst Form = ({ saveSummary, saveSpinner }) => {\n\n    // State  for saving all info of form\n    const [ info, saveInfo ] = useState({\n        brand: '',\n        year: '',\n        plan: ''\n    });\n\n    // State for submit error\n    const [ error, updateError ] = useState(false);\n\n    // Extract values from state\n    const { brand, year, plan } = info;\n\n    // Update information of form\n    const updateInfo = e => {\n        saveInfo({\n            ...info,\n            [e.target.name] : e.target.value\n        })\n    }\n\n    // Submit\n    const quoteInsurance = e => {\n        e.preventDefault();\n\n        // Validation\n        if ( brand === \"\" || brand === \"-- Select --\" || year === \"\" || year === \"-- Select --\" || plan === \"\") {\n            updateError(true);\n            return;\n        }\n\n        updateError(false);\n\n        // Establish a default value for insurance\n        let defaultInsurance = 2000;\n\n        // Get insurance by year\n        defaultInsurance = getInsuranceByYear(parseInt(year), defaultInsurance);\n\n        // Now add the increase by the type of brand\n        defaultInsurance = getInsuranceByBrand(brand, defaultInsurance);\n\n        // Finally add the increase by type of plan\n        defaultInsurance = getInsuranceByPlan(plan, defaultInsurance);\n\n        // The following code is not necesary, it's only for example purposes\n        saveSpinner(true);\n\n        setTimeout(() => {\n            saveSpinner(false);\n\n            saveSummary({\n                quote: defaultInsurance,\n                info\n            });\n        }, 2000);\n    }\n\n\n    return ( \n        <form\n            onSubmit={quoteInsurance}\n        >\n            { error ? <div className=\"row\"><Error>All fields are mandatory</Error></div> : null}\n            <div className=\"form-group row\">\n                <label className=\"col-sm-2 col-form-label\">Brand</label>\n                <select \n                    className=\"form-control col-sm-10\"\n                    name=\"brand\"\n                    value={brand}\n                    onChange={updateInfo}\n                >\n                    <option value=\"\">-- Select --</option>\n                    <option value=\"American\">American</option>\n                    <option value=\"European\">European</option>\n                    <option value=\"Asian\">Asian</option>\n                </select>\n            </div>\n\n            <div className=\"form-group row\">\n                <label className=\"col-sm-2 col-form-label\">Year</label>\n                <select \n                    className=\"form-control col-sm-10\"\n                    name=\"year\"\n                    value={year}\n                    onChange={updateInfo}\n                >\n                    <option value=\"\">-- Select --</option>\n                    <option value=\"2021\">2021</option>\n                    <option value=\"2020\">2020</option>\n                    <option value=\"2019\">2019</option>\n                    <option value=\"2018\">2018</option>\n                    <option value=\"2017\">2017</option>\n                    <option value=\"2016\">2016</option>\n                    <option value=\"2015\">2015</option>\n                    <option value=\"2014\">2014</option>\n                    <option value=\"2013\">2013</option>\n                    <option value=\"2012\">2012</option>\n                </select>\n            </div>\n\n            <div className=\"form-check form-check-inline\">\n                <input \n                    className=\"form-check-input\" \n                    type=\"radio\" \n                    name=\"plan\"\n                    value=\"Basic\"\n                    checked={plan === \"Basic\"}\n                    onChange={updateInfo}\n                />\n                <label className=\"form-check-label\">Basic</label>\n            </div>\n\n            <div className=\"form-check form-check-inline\">\n                <input \n                    className=\"form-check-input\" \n                    type=\"radio\" \n                    name=\"plan\"\n                    value=\"Complete\"\n                    checked={plan === \"Complete\"}\n                    onChange={updateInfo}\n                />                \n                <label className=\"form-check-label\">Complete</label>\n            </div>\n\n            <div className=\"row\">\n                <Button\n                    className=\"btn btn-block mt-4\"\n                    type=\"submit\"\n                >Submit</Button>\n            </div>\n        </form>\n     );\n};\n\nForm.propTypes = {\n    saveSummary: PropTypes.func.isRequired,\n    saveSpinner: PropTypes.func.isRequired\n};\n \nexport default Form;","// Get insurance by year, estimate 3% of decrease of each year of difference from today\nexport function getInsuranceByYear(year, insurance) {\n    const difference = new Date().getFullYear() - year\n    return insurance - (( difference * 3 ) * insurance) / 100;;\n}\n\nexport function getInsuranceByBrand(brand, insurance) {\n\n    switch(brand) {\n        case 'European':\n            return (insurance*1.30).toFixed(2);\n        case 'American':\n            return (insurance*1.15).toFixed(2);\n        case 'Asian':\n            return (insurance*1.05).toFixed(2);\n        default:\n            return insurance;\n    }\n}\n\nexport function getInsuranceByPlan(plan, insurance) {\n    switch(plan) {\n        case 'Basic':\n            return (insurance*1.20).toFixed(2);\n        case 'Complete':\n            return (insurance*1.5).toFixed(2);\n        default:\n            return insurance;\n    }\n}","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nconst SummaryContainer = styled.div`\n    padding: 1rem;\n    text-align: center;\n    background-color: #00838F;\n    color: #FFF;\n    margin-top: 1rem;\n    width:100%;\n`;\n\n\nconst Summary = ({ summary }) => {\n\n    const {brand, year, plan} = summary.info;\n    \n    if (brand === \"\" || year === \"\" || plan === \"\") {\n        return null;\n    }\n\n    return(\n        <div className=\"row\">\n            <SummaryContainer>\n                <h2>Quote Summary</h2>\n                <ul>\n                    <li>Brand: {brand}</li>\n                    <li>Plan: {plan}</li>\n                    <li>Year: {year}</li>\n                </ul>\n            </SummaryContainer>\n        </div>\n    \n    );\n};\n\nSummary.propTypes = {\n    summary: PropTypes.object.isRequired\n};\n \nexport default Summary;","import React from 'react';\nimport styled from '@emotion/styled';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\n\nconst Messagge = styled.p`\n    background-color: rgb(127, 224, 237);\n    margin-top: 2rem;\n    padding: 1rem;\n    text-align: center;\n    width:100%;\n`;\n\nconst QuoteText = styled.p`\n    color: #00838F;\n    padding: 1rem;\n    text-transform: uppercase;\n    font-weight: bold;\n    margin: 0;\n    width:100%;\n`;\n\nconst QuoteContainer = styled.div`\n    text-align: center;\n    padding: .5rem;\n    border: 1px solid #26C6DA;\n    background-color: rgb(127, 224, 237);\n    margin-top: 1rem;\n    position: relative;\n` ;\n\n\nconst Result = ({ summary }) => {\n\n    const {quote} = summary;\n    \n    if (quote === 0) {\n        return (<div className=\"row\"><Messagge>Please select brand, year and type of insurance</Messagge></div>);\n    }\n\n    return ( \n        <QuoteContainer className=\"row\">\n            <TransitionGroup\n                component=\"div\"\n                className=\"result\"\n            >\n                <CSSTransition\n                    classNames=\"result\"\n                    key={quote}\n                    timeout={{ enter: 500, exit: 500 }}\n                >\n                    <QuoteText>Total amount is: $ {quote}</QuoteText>\n                </CSSTransition>\n            </TransitionGroup>\n        </QuoteContainer>\n     );\n};\n\nResult.propTypes = {\n    summary: PropTypes.object.isRequired\n};\n \nexport default Result;","import React from 'react';\nimport '../Spinner.css';\n\nconst Spinner = () => (\n    <div className=\"sk-circle\">\n        <div className=\"sk-circle1 sk-child\"></div>\n        <div className=\"sk-circle2 sk-child\"></div>\n        <div className=\"sk-circle3 sk-child\"></div>\n        <div className=\"sk-circle4 sk-child\"></div>\n        <div className=\"sk-circle5 sk-child\"></div>\n        <div className=\"sk-circle6 sk-child\"></div>\n        <div className=\"sk-circle7 sk-child\"></div>\n        <div className=\"sk-circle8 sk-child\"></div>\n        <div className=\"sk-circle9 sk-child\"></div>\n        <div className=\"sk-circle10 sk-child\"></div>\n        <div className=\"sk-circle11 sk-child\"></div>\n        <div className=\"sk-circle12 sk-child\"></div>\n    </div>\n);\n \nexport default Spinner;","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport styled from '@emotion/styled';\nimport Form from './components/Form';\nimport Summary from './components/Summary';\nimport Result from './components/Result';\nimport Spinner from './components/Spinner';\n\nconst FormContainer = styled.div`\n  background-color: #FFF;\n  padding: 3rem;\n`;\n\nfunction App() {\n\n  const [ summary, saveSummary ] = useState({\n    quote: 0,\n    info: {\n      brand: '',\n      year: '',\n      plan: ''\n    }\n  });\n\n  // State for when to show spinner\n  const [ spinner, saveSpinner ] = useState(false);\n\n\n  return (\n    <>\n      <div className=\"container\">\n        <Header title=\"Insurance Quote\" />\n\n        <FormContainer>\n          <Form \n            saveSummary={saveSummary}\n            saveSpinner={saveSpinner}\n          />\n          {spinner ? <Spinner /> : null}\n          <Summary\n            summary={summary}\n          />\n          {!spinner ? <Result summary={summary} /> : null}\n        </FormContainer>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}